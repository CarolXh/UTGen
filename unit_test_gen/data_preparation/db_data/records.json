[
  {
    "text": "该类提供数据清洗功能，主要用于处理轨迹点数据。它会过滤掉字段缺失、异常值以及与航迹不符的轨迹点，最终返回清洗后的轨迹点列表。",
    "tags": [
      "文件名：DataCleaner.java",
      "总体功能"
    ]
  },
  {
    "text": "*函数功能*：清洗轨迹点数据，去除不符合要求的点。\n*函数参数*：\n    * `trackPoints`：`List<TrackPoint4Alg>`类型，表示待清洗的轨迹点列表。\n*返回值*：`List<TrackPoint4Alg>`，表示清洗后的轨迹点列表。\n*异常*：无",
    "tags": [
      "文件名：DataCleaner.java",
      "接口说明",
      "cleanData"
    ]
  },
  {
    "text": "*函数功能*：判断当前点是否与前面的航迹点不符。\n*函数参数*：\n    * `point`：`TrackPoint4Alg`类型，表示当前要判断的轨迹点。\n    * `trajectory`：`List<TrackPoint4Alg>`类型，表示前面的航迹点列表。\n*返回值*：`boolean`，如果当前点与前面的航迹点不符则返回`true`，否则返回`false`。\n*异常*：无",
    "tags": [
      "文件名：DataCleaner.java",
      "接口说明",
      "isPointInconsistentWithTrajectory"
    ]
  },
  {
    "text": "*函数功能*：计算两点之间的地理距离。\n*函数参数*：\n    * `point1`：`TrackPoint4Alg`类型，表示第一个轨迹点。\n    * `point2`：`TrackPoint4Alg`类型，表示第二个轨迹点。\n*返回值*：`double`，表示两点之间的地理距离（单位：米）。\n*异常*：无",
    "tags": [
      "文件名：DataCleaner.java",
      "接口说明",
      "calculateDistance"
    ]
  },
  {
    "text": "该类用于计算两个无人机（UAV）轨迹点之间的最小水平距离和最小垂直距离。它包含一个`TrackPoint`类，用于表示轨迹点，以及一个`findMinDistances`方法，用于计算最小距离。此外，还包含辅助类`Pair`和`Result`，用于存储计算结果。",
    "tags": [
      "文件名：FindMinDistanceXYAndZ.java",
      "总体功能"
    ]
  },
  {
    "text": "*函数功能*  \n计算两个地理坐标点之间的水平距离，使用哈弗赛因公式。\n*函数参数*  \n- `double lat1`：第一个点的纬度。\n- `double lon1`：第一个点的经度。\n- `double lat2`：第二个点的纬度。\n- `double lon2`：第二个点的经度。\n*返回值*  \n- `double`：两个点之间的水平距离，单位为米。\n*异常*  \n- 无",
    "tags": [
      "文件名：FindMinDistanceXYAndZ.java",
      "接口说明",
      "函数名：haversineDistance"
    ]
  },
  {
    "text": "*函数功能*  \n计算两个无人机轨迹点列表之间的最小水平距离和最小垂直距离。\n*函数参数*  \n- `List<TrackPoint> uavA`：第一个无人机的轨迹点列表。\n- `List<TrackPoint> uavB`：第二个无人机的轨迹点列表。\n*返回值*  \n- `Result`：包含最小水平距离、最小垂直距离以及对应的轨迹点对。\n*异常*  \n- 无",
    "tags": [
      "文件名：FindMinDistanceXYAndZ.java",
      "接口说明",
      "函数名：findMinDistances"
    ]
  },
  {
    "text": "*函数功能*  \n创建一个轨迹点对象。\n*函数参数*  \n- `String time`：轨迹点的时间戳。\n- `double latitude`：轨迹点的纬度。\n- `double longitude`：轨迹点的经度。\n- `double altitude`：轨迹点的海拔高度。\n*返回值*  \n- 无\n*异常*  \n- 无",
    "tags": [
      "文件名：FindMinDistanceXYAndZ.java",
      "接口说明",
      "函数名：TrackPoint（构造函数）"
    ]
  },
  {
    "text": "*函数功能*  \n创建一个轨迹点对对象。\n*函数参数*  \n- `TrackPoint pointA`：第一个轨迹点。\n- `TrackPoint pointB`：第二个轨迹点。\n*返回值*  \n- 无\n*异常*  \n- 无",
    "tags": [
      "文件名：FindMinDistanceXYAndZ.java",
      "接口说明",
      "函数名：Pair（构造函数）"
    ]
  },
  {
    "text": "*函数功能*  \n创建一个结果对象，包含最小水平距离、最小垂直距离以及对应的轨迹点对。\n*函数参数*  \n- `List<Pair> horizontalPairs`：最小水平距离对应的轨迹点对列表。\n- `double minHorizontalDistance`：最小水平距离。\n- `List<Pair> verticalPairs`：最小垂直距离对应的轨迹点对列表。\n- `double minVerticalDistance`：最小垂直距离。\n*返回值*  \n- 无\n*异常*  \n- 无",
    "tags": [
      "文件名：FindMinDistanceXYAndZ.java",
      "接口说明",
      "函数名：Result（构造函数）"
    ]
  },
  {
    "text": "FlightPathConsistencyCheck.java",
    "tags": [
      "文件名"
    ]
  },
  {
    "text": "该类提供无人机飞行路径一致性检查的功能。它包含多个静态方法，用于计算两点之间的水平距离（Haversine 公式）、垂直距离（高度差）、检查无人机当前位置是否满足阈值条件，以及从 CSV 文件中读取航点数据。此外，还包含一个内部类 `UAVPositionCheck`，用于执行一些与无人机位置相关的计算，如地理坐标与笛卡尔坐标之间的转换、计算垂足位置等。",
    "tags": [
      "文件名",
      "总体功能"
    ]
  },
  {
    "text": "*函数功能*  \n计算两点之间的 Haversine 距离，即地球表面上两点之间的最短距离。\n*函数参数*  \n- `lat1`：第一个点的纬度（度）。\n- `lon1`：第一个点的经度（度）。\n- `lat2`：第二个点的纬度（度）。\n- `lon2`：第二个点的经度（度）。\n*返回值*  \n两点之间的 Haversine 距离（米）。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "UAVPositionCheck.haversine"
    ]
  },
  {
    "text": "*函数功能*  \n将地理坐标（纬度、经度、高度）转换为笛卡尔坐标（x、y、z）。\n*函数参数*  \n- `lat`：纬度（度）。\n- `lon`：经度（度）。\n- `h`：高度（米）。\n*返回值*  \n一个包含三个元素的数组，分别表示 x、y、z 坐标。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "UAVPositionCheck.geodeticToCartesian"
    ]
  },
  {
    "text": "*函数功能*  \n将笛卡尔坐标（x、y、z）转换回地理坐标（纬度、经度、高度）。\n*函数参数*  \n- `x`：x 坐标。\n- `y`：y 坐标。\n- `z`：z 坐标。\n*返回值*  \n一个包含三个元素的数组，分别表示纬度、经度、高度。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "UAVPositionCheck.cartesianToGeodetic"
    ]
  },
  {
    "text": "*函数功能*  \n计算从点 P 到线段 AB 的垂足位置。\n*函数参数*  \n- `latP`：点 P 的纬度（度）。\n- `lonP`：点 P 的经度（度）。\n- `hP`：点 P 的高度（米）。\n- `latA`：点 A 的纬度（度）。\n- `lonA`：点 A 的经度（度）。\n- `hA`：点 A 的高度（米）。\n- `latB`：点 B 的纬度（度）。\n- `lonB`：点 B 的经度（度）。\n- `hB`：点 B 的高度（米）。\n*返回值*  \n一个包含三个元素的数组，表示垂足的纬度、经度、高度。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "UAVPositionCheck.calculateFootPoint"
    ]
  },
  {
    "text": "*函数功能*  \n计算两点之间的水平距离，使用 Haversine 公式。\n*函数参数*  \n- `lon1`：第一个点的经度（度）。\n- `lat1`：第一个点的纬度（度）。\n- `lon2`：第二个点的经度（度）。\n- `lat2`：第二个点的纬度（度）。\n*返回值*  \n两点之间的水平距离（米）。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "FlightPathConsistencyCheck.haversine"
    ]
  },
  {
    "text": "*函数功能*  \n计算两点之间的垂直距离，即高度差。\n*函数参数*  \n- `alt1`：第一个点的高度（米）。\n- `alt2`：第二个点的高度（米）。\n*返回值*  \n两点之间的垂直距离（米）。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "FlightPathConsistencyCheck.verticalDistance"
    ]
  },
  {
    "text": "*函数功能*  \n检查无人机当前位置是否满足给定的水平和垂直阈值条件。\n*函数参数*  \n- `currentPos`：无人机当前位置，包含经度、纬度、高度的数组。\n- `waypoints`：航点列表，每个航点是一个包含经度、纬度、高度的数组。\n- `horizontalThreshold`：水平距离阈值（米）。\n- `verticalThreshold`：垂直距离阈值（米）。\n*返回值*  \n如果无人机当前位置满足任一阈值条件，则返回 `true`；否则返回 `false`。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "FlightPathConsistencyCheck.checkThreshold"
    ]
  },
  {
    "text": "*函数功能*  \n从 CSV 文件中读取航点数据。\n*函数参数*  \n- `filePath`：CSV 文件路径。\n*返回值*  \n一个包含航点数据的列表，每个航点是一个包含经度、纬度、高度的数组。\n*异常*  \n- `IOException`：如果文件读取过程中发生错误，则抛出此异常。",
    "tags": [
      "文件名",
      "接口说明",
      "FlightPathConsistencyCheck.readCSV"
    ]
  },
  {
    "text": "该类提供了一种方法来对两条轨迹进行时间对齐。它通过在轨迹B中找到与轨迹A中每个点时间最接近的两个点，然后使用这两个点对轨迹B进行线性插值，从而计算出轨迹A和插值后的轨迹B之间的空间距离。",
    "tags": [
      "interpolation.java",
      "总体功能"
    ]
  },
  {
    "text": "*函数功能*  \n将轨迹B对齐到轨迹A的时间线上，通过在轨迹B中找到与轨迹A中每个点时间最接近的两个点，然后进行线性插值，计算出轨迹A和插值后的轨迹B之间的空间距离。\n*函数参数*  \n- `List<TrackPoint4Alg> trajectoryA`：轨迹A的点列表。\n- `List<TrackPoint4Alg> trajectoryB`：轨迹B的点列表。\n*返回值*  \n无返回值。\n*异常*  \n无异常。",
    "tags": [
      "interpolation.java",
      "接口说明",
      "alignTrajectoryBToA"
    ]
  },
  {
    "text": "*函数功能*  \n在轨迹B中找到时间小于指定点时间的最接近的点。\n*函数参数*  \n- `TrackPoint4Alg pointA`：指定的点。\n- `List<TrackPoint4Alg> trajectoryB`：轨迹B的点列表。\n*返回值*  \n返回轨迹B中时间小于指定点时间的最接近的点，如果不存在则返回`null`。\n*异常*  \n无异常。",
    "tags": [
      "interpolation.java",
      "接口说明",
      "findClosestPointBefore"
    ]
  },
  {
    "text": "*函数功能*  \n在轨迹B中找到时间大于指定点时间的最接近的点。\n*函数参数*  \n- `TrackPoint4Alg pointA`：指定的点。\n- `List<TrackPoint4Alg> trajectoryB`：轨迹B的点列表。\n*返回值*  \n返回轨迹B中时间大于指定点时间的最接近的点，如果不存在则返回`null`。\n*异常*  \n无异常。",
    "tags": [
      "interpolation.java",
      "接口说明",
      "findClosestPointAfter"
    ]
  },
  {
    "text": "*函数功能*  \n对两个点进行线性插值，获取在指定时间上的坐标。\n*函数参数*  \n- `TrackPoint4Alg p1`：第一个点。\n- `TrackPoint4Alg p2`：第二个点。\n- `long targetTime`：目标时间。\n*返回值*  \n返回插值后的点。\n*异常*  \n无异常。",
    "tags": [
      "interpolation.java",
      "接口说明",
      "linearInterpolate"
    ]
  },
  {
    "text": "*函数功能*  \n计算两个点之间的空间距离。\n*函数参数*  \n- `TrackPoint4Alg p1`：第一个点。\n- `TrackPoint4Alg p2`：第二个点。\n*返回值*  \n返回两个点之间的空间距离。\n*异常*  \n无异常。",
    "tags": [
      "interpolation.java",
      "接口说明",
      "calculateDistance"
    ]
  },
  {
    "text": "minDistanceCal.java",
    "tags": [
      "文件名"
    ]
  },
  {
    "text": "该类提供了一组方法用于计算航迹点之间的距离，包括球面距离和三维距离，并能够计算两条航迹之间的最小距离和平均距离。",
    "tags": [
      "文件名",
      "总体功能"
    ]
  },
  {
    "text": "*函数功能*  \n计算两个地理坐标点之间的球面距离，单位为米。\n*函数参数*  \n- `double lon1`：第一个点的经度。\n- `double lat1`：第一个点的纬度。\n- `double lon2`：第二个点的经度。\n- `double lat2`：第二个点的纬度。\n*返回值*  \n两个点之间的球面距离，单位为米。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "haversineDistance"
    ]
  },
  {
    "text": "*函数功能*  \n计算两个航迹点之间的三维距离，考虑了经度、纬度和高度。\n*函数参数*  \n- `TrackPoint p1`：第一个航迹点。\n- `TrackPoint p2`：第二个航迹点。\n*返回值*  \n两个点之间的三维距离，单位为米。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "calculate3dDistance"
    ]
  },
  {
    "text": "*函数功能*  \n计算两条航迹之间的最小距离和平均距离，并返回相关信息。\n*函数参数*  \n- `List<TrackPoint> trackA`：第一条航迹的点列表。\n- `List<TrackPoint> trackB`：第二条航迹的点列表。\n*返回值*  \n一个`Result`对象，包含最小距离、平均距离以及对应的最近点。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "minDistanceCal"
    ]
  },
  {
    "text": "*函数功能*  \n表示一个航迹点，包含时间、纬度、经度和高度信息。\n*函数参数*  \n- `String time`：时间戳。\n- `double latitude`：纬度。\n- `double longitude`：经度。\n- `double altitude`：高度。\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "TrackPoint"
    ]
  },
  {
    "text": "*函数功能*  \n表示计算结果，包含最小距离、平均距离以及对应的最近点。\n*函数参数*  \n- `double minDistance`：最小距离。\n- `double averageDistance`：平均距离。\n- `TrackPoint closestPoint1`：第一条航迹的最近点。\n- `TrackPoint closestPoint2`：第二条航迹的最近点。\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "Result"
    ]
  },
  {
    "text": "`TrackPoint4Alg` 类用于表示一个轨迹点的详细信息，包括设备名称、时间戳、经纬度、高度、速度和加速度等数据。该类提供了构造方法用于初始化轨迹点数据，以及 Getter 和 Setter 方法用于访问和修改各个属性值，还重写了 `toString` 方法以便于打印对象信息。",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "总体功能"
    ]
  },
  {
    "text": "*函数功能*  \n构造一个轨迹点对象，初始化其设备名称、时间戳、经纬度、高度、速度和加速度等属性。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| name | String | 设备名称 |\n| timestamp | long | 时间戳 |\n| longitude | double | 经度 |\n| latitude | double | 纬度 |\n| altitude | double | 高度 |\n| northVelocity | double | 北向速度 |\n| eastVelocity | double | 东向速度 |\n| downVelocity | double | 地向速度 |\n| northAcceleration | double | 北向加速度 |\n| eastAcceleration | double | 东向加速度 |\n| downAcceleration | double | 地向加速度 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "构造方法"
    ]
  },
  {
    "text": "*函数功能*  \n获取设备名称。\n*函数参数*  \n无\n*返回值*  \n返回设备名称，类型为 `String`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "getName"
    ]
  },
  {
    "text": "*函数功能*  \n设置设备名称。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| name | String | 设备名称 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "setName"
    ]
  },
  {
    "text": "*函数功能*  \n获取时间戳。\n*函数参数*  \n无\n*返回值*  \n返回时间戳，类型为 `long`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "getTimestamp"
    ]
  },
  {
    "text": "*函数功能*  \n设置时间戳。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| timestamp | long | 时间戳 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "setTimestamp"
    ]
  },
  {
    "text": "*函数功能*  \n获取经度。\n*函数参数*  \n无\n*返回值*  \n返回经度，类型为 `double`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "getLongitude"
    ]
  },
  {
    "text": "*函数功能*  \n设置经度。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| longitude | double | 经度 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "setLongitude"
    ]
  },
  {
    "text": "*函数功能*  \n获取纬度。\n*函数参数*  \n无\n*返回值*  \n返回纬度，类型为 `double`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "getLatitude"
    ]
  },
  {
    "text": "*函数功能*  \n设置纬度。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| latitude | double | 纬度 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "setLatitude"
    ]
  },
  {
    "text": "*函数功能*  \n获取高度。\n*函数参数*  \n无\n*返回值*  \n返回高度，类型为 `double`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "getAltitude"
    ]
  },
  {
    "text": "*函数功能*  \n设置高度。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| altitude | double | 高度 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "setAltitude"
    ]
  },
  {
    "text": "*函数功能*  \n获取北向速度。\n*函数参数*  \n无\n*返回值*  \n返回北向速度，类型为 `double`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "getNorthVelocity"
    ]
  },
  {
    "text": "*函数功能*  \n设置北向速度。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| northVelocity | double | 北向速度 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "setNorthVelocity"
    ]
  },
  {
    "text": "*函数功能*  \n获取东向速度。\n*函数参数*  \n无\n*返回值*  \n返回东向速度，类型为 `double`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "getEastVelocity"
    ]
  },
  {
    "text": "*函数功能*  \n设置东向速度。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| eastVelocity | double | 东向速度 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "setEastVelocity"
    ]
  },
  {
    "text": "*函数功能*  \n获取地向速度。\n*函数参数*  \n无\n*返回值*  \n返回地向速度，类型为 `double`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "getDownVelocity"
    ]
  },
  {
    "text": "*函数功能*  \n设置地向速度。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| downVelocity | double | 地向速度 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "setDownVelocity"
    ]
  },
  {
    "text": "*函数功能*  \n获取北向加速度。\n*函数参数*  \n无\n*返回值*  \n返回北向加速度，类型为 `double`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "getNorthAcceleration"
    ]
  },
  {
    "text": "*函数功能*  \n设置北向加速度。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| northAcceleration | double | 北向加速度 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "setNorthAcceleration"
    ]
  },
  {
    "text": "*函数功能*  \n获取东向加速度。\n*函数参数*  \n无\n*返回值*  \n返回东向加速度，类型为 `double`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "getEastAcceleration"
    ]
  },
  {
    "text": "*函数功能*  \n设置东向加速度。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| eastAcceleration | double | 东向加速度 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "setEastAcceleration"
    ]
  },
  {
    "text": "*函数功能*  \n获取地向加速度。\n*函数参数*  \n无\n*返回值*  \n返回地向加速度，类型为 `double`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "getDownAcceleration"
    ]
  },
  {
    "text": "*函数功能*  \n设置地向加速度。\n*函数参数*  \n| 参数名称 | 参数类型 | 参数描述 |\n| --- | --- | --- |\n| downAcceleration | double | 地向加速度 |\n*返回值*  \n无\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "Getter 和 Setter 方法",
      "setDownAcceleration"
    ]
  },
  {
    "text": "*函数功能*  \n重写 `toString` 方法，返回轨迹点对象的详细信息，包括设备名称、时间戳、经纬度、高度、速度和加速度等。\n*函数参数*  \n无\n*返回值*  \n返回轨迹点对象的详细信息，类型为 `String`。\n*异常*  \n无",
    "tags": [
      "TrackPoint4Alg 类接口文档",
      "接口说明",
      "toString"
    ]
  },
  {
    "text": "TrackPredMotionEquation.java",
    "tags": [
      "文件名"
    ]
  },
  {
    "text": "该类用于预测无人机的未来轨迹。它基于当前状态（包括时间戳、经纬度、高度、速度和加速度）和预测参数（预测时间和时间步长），通过物理运动方程计算未来轨迹，并提供打印轨迹的功能。",
    "tags": [
      "文件名",
      "总体功能"
    ]
  },
  {
    "text": "*函数功能*\n根据无人机的当前状态和预测参数，预测其未来轨迹。轨迹以时间戳、经度、纬度和高度的形式返回。\n*函数参数*\n- `currentState`：`double[]`，无人机的当前状态，包含以下元素：\n  - `timestamp`：时间戳（单位：秒）\n  - `longitude`：经度（单位：度）\n  - `latitude`：纬度（单位：度）\n  - `altitude`：高度（单位：米）\n  - `vNorth`：北向速度（单位：米/秒）\n  - `vEast`：东向速度（单位：米/秒）\n  - `vDown`：下向速度（单位：米/秒）\n  - `aNorth`：北向加速度（单位：米/秒²）\n  - `aEast`：东向加速度（单位：米/秒²）\n  - `aDown`：下向加速度（单位：米/秒²）\n- `predictionTime`：`double`，预测时间（单位：秒）\n- `timeStep`：`double`，时间步长（单位：秒）\n*返回值*\n- `List<double[]>`，预测轨迹的列表，每个轨迹点包含以下元素：\n  - `timestamp`：时间戳（单位：秒）\n  - `longitude`：经度（单位：度）\n  - `latitude`：纬度（单位：度）\n  - `altitude`：高度（单位：米）\n*异常*\n- 无",
    "tags": [
      "文件名",
      "接口说明",
      "predictTrajectory"
    ]
  },
  {
    "text": "*函数功能*\n打印预测的轨迹，格式为时间戳、经度、纬度和高度。\n*函数参数*\n- `trajectory`：`List<double[]>`，预测的轨迹\n*返回值*\n- 无\n*异常*\n- 无",
    "tags": [
      "文件名",
      "接口说明",
      "printTrajectory"
    ]
  },
  {
    "text": "TrajectoryPrediction.java",
    "tags": [
      "文件名"
    ]
  },
  {
    "text": "该类提供了一个基于历史轨迹数据预测未来轨迹的功能。它通过最小二乘法拟合历史轨迹数据中的纬度、经度和高度，然后利用拟合的多项式模型预测未来一段时间内的轨迹点。",
    "tags": [
      "文件名",
      "总体功能"
    ]
  },
  {
    "text": "*函数功能*  \n根据历史轨迹数据预测未来一段时间内的轨迹。该函数首先解析历史数据的时间戳，将其转换为相对于最后一个时间点的相对时间（单位为秒）。然后，分别对纬度、经度和高度进行多项式拟合，最后利用拟合的多项式模型预测未来一段时间内的轨迹点。\n*函数参数*  \n- `historyData`：`List<Record>`类型，表示历史轨迹数据，每个`Record`对象包含时间戳、纬度、经度和高度等信息。\n- `futurePeriod`：`int`类型，表示预测未来的时间长度（单位为秒），但目前代码中未使用该参数，固定预测未来60秒的轨迹。\n*返回值*  \n返回一个`List<Record>`，表示预测的未来轨迹点，每个`Record`对象包含预测的时间戳、纬度、经度和高度。\n*异常*  \n可能抛出`ParseException`，表示在解析时间戳时发生错误。",
    "tags": [
      "文件名",
      "接口说明",
      "predictTrajectory"
    ]
  },
  {
    "text": "*函数功能*  \n使用最小二乘法拟合给定数据点的多项式模型。该函数构造了设计矩阵X和目标向量y，然后通过计算XT * X和XT * y，最终使用高斯消去法解线性方程组，得到多项式的系数。\n*函数参数*  \n- `x`：`List<Double>`类型，表示自变量数据点。\n- `y`：`List<Double>`类型，表示因变量数据点。\n- `degree`：`int`类型，表示拟合多项式的最高次数。\n*返回值*  \n返回一个`double[]`，表示拟合多项式的系数，从最高次项到常数项。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "fitPolynomial"
    ]
  },
  {
    "text": "*函数功能*  \n使用高斯消去法解线性方程组。该函数通过行交换将矩阵A转换为上三角矩阵，然后通过回代求解线性方程组的解。\n*函数参数*  \n- `A`：`double[][]`类型，表示系数矩阵。\n- `b`：`double[]`类型，表示目标向量。\n*返回值*  \n返回一个`double[]`，表示线性方程组的解。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "solveLinearSystem"
    ]
  },
  {
    "text": "*函数功能*  \n计算多项式在给定点的值。该函数利用霍纳法则高效地计算多项式的值。\n*函数参数*  \n- `coef`：`double[]`类型，表示多项式的系数，从最高次项到常数项。\n- `x`：`double`类型，表示计算多项式值的点。\n*返回值*  \n返回一个`double`，表示多项式在给定点的值。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "evaluatePolynomial"
    ]
  },
  {
    "text": "*函数功能*  \n计算矩阵的转置。该函数将矩阵的行和列互换，生成转置矩阵。\n*函数参数*  \n- `matrix`：`double[][]`类型，表示需要转置的矩阵。\n*返回值*  \n返回一个`double[][]`，表示转置后的矩阵。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "transposeMatrix"
    ]
  },
  {
    "text": "*函数功能*  \n计算两个矩阵的乘积。该函数按照矩阵乘法的规则，计算两个矩阵的乘积。\n*函数参数*  \n- `A`：`double[][]`类型，表示第一个矩阵。\n- `B`：`double[][]`类型，表示第二个矩阵。\n*返回值*  \n返回一个`double[][]`，表示两个矩阵的乘积。\n*异常*  \n无",
    "tags": [
      "文件名",
      "接口说明",
      "multiplyMatrices"
    ]
  },
  {
    "text": "TrajectoryPredictionV1.java",
    "tags": [
      "文件名"
    ]
  },
  {
    "text": "该类提供了轨迹预测的功能，通过指定拟合方式，对给定的二维数据点进行拟合，返回对应的多项式函数。支持线性拟合和二次多项式拟合。",
    "tags": [
      "文件名",
      "总体功能"
    ]
  },
  {
    "text": "*函数功能*  \n根据指定的拟合方式对给定的二维数据点进行拟合，返回对应的多项式函数。支持线性拟合（拟合类型为1）和二次多项式拟合（拟合类型为2）。\n*函数参数*  \n- `double[] x`：数据点的横坐标数组。\n- `double[] y`：数据点的纵坐标数组。\n- `int fittingType`：拟合方式，1表示线性拟合，2表示二次多项式拟合。\n*返回值*  \n返回一个`PolynomialFunction`对象，表示拟合后的多项式函数。\n*异常*  \n- `IllegalArgumentException`：当`fittingType`不是1或2时抛出此异常，提示不支持的拟合类型。",
    "tags": [
      "文件名",
      "接口说明",
      "fitTrajectory"
    ]
  },
  {
    "text": "该类用于轨迹可视化的功能实现，包括从 CSV 文件读取数据、生成示例数据、保存静态图像以及绘制轨迹面板等。它通过静态方法和内部类 TrajectoryPanel 实现了轨迹数据的读取、处理和可视化。",
    "tags": [
      "文件名：TrajectoryVisualization.java",
      "总体功能"
    ]
  },
  {
    "text": "*函数功能*  \n从指定的 CSV 文件路径读取数据，如果文件不存在则生成示例数据。数据包括时间、经度、纬度和高度，同时会添加模拟的测量数据（带噪声）。\n*函数参数*  \n- `String filePath`：CSV 文件的路径。\n*返回值*  \n- `boolean`：如果成功读取或生成数据则返回 `true`，否则返回 `false`。\n*异常*  \n- `IOException`：如果在读取文件时发生输入输出异常。",
    "tags": [
      "文件名：TrajectoryVisualization.java",
      "接口说明",
      "readCsvData"
    ]
  },
  {
    "text": "*函数功能*  \n生成示例数据，用于在无法读取 CSV 文件时提供默认数据。生成的数据包括时间、经度、纬度和高度，同时会添加模拟的测量数据（带噪声）。\n*函数参数*  \n无。\n*返回值*  \n无。\n*异常*  \n无。",
    "tags": [
      "文件名：TrajectoryVisualization.java",
      "接口说明",
      "generateSampleData"
    ]
  },
  {
    "text": "*函数功能*  \n保存轨迹面板的每一帧为静态图像。根据传入的面板、宽度、高度和文件前缀，将每一帧绘制为 BufferedImage 并保存为 PNG 文件。\n*函数参数*  \n- `TrajectoryPanel panel`：轨迹面板实例。\n- `int width`：图像宽度。\n- `int height`：图像高度。\n- `String filePrefix`：保存文件的前缀。\n*返回值*  \n无。\n*异常*  \n- `IOException`：如果在保存图像时发生输入输出异常。",
    "tags": [
      "文件名：TrajectoryVisualization.java",
      "接口说明",
      "saveFrames"
    ]
  },
  {
    "text": "*函数功能*  \n内部类，用于绘制轨迹面板。面板上会绘制真实轨迹、测量数据和未来预测轨迹，并且可以根据当前帧数动态更新显示内容。\n*函数参数*  \n- `int width`：面板宽度。\n- `int height`：面板高度。\n*返回值*  \n无。\n*异常*  \n无。",
    "tags": [
      "文件名：TrajectoryVisualization.java",
      "接口说明",
      "TrajectoryPanel"
    ]
  },
  {
    "text": "*函数功能*  \n设置当前帧数，并根据当前帧更新未来预测数据。同时触发面板的重绘。\n*函数参数*  \n- `int frame`：当前帧数。\n*返回值*  \n无。\n*异常*  \n无。",
    "tags": [
      "文件名：TrajectoryVisualization.java",
      "接口说明",
      "TrajectoryPanel",
      "setFrame"
    ]
  },
  {
    "text": "*函数功能*  \n重写 JPanel 的 paintComponent 方法，用于绘制面板内容。绘制内容包括背景、网格、真实轨迹、测量数据和未来预测轨迹。\n*函数参数*  \n- `Graphics g`：绘图上下文。\n*返回值*  \n无。\n*异常*  \n无。",
    "tags": [
      "文件名：TrajectoryVisualization.java",
      "接口说明",
      "TrajectoryPanel",
      "paintComponent"
    ]
  },
  {
    "text": "*函数功能*  \n在面板上绘制一个点，根据传入的位置、坐标范围和颜色进行绘制。\n*函数参数*  \n- `Graphics2D g2d`：绘图上下文。\n- `double[] pos`：点的位置，包含经度、纬度和高度。\n- `double lonMin`：经度最小值。\n- `double lonMax`：经度最大值。\n- `double latMin`：纬度最小值。\n- `double latMax`：纬度最大值。\n- `Color color`：点的颜色。\n*返回值*  \n无。\n*异常*  \n无。",
    "tags": [
      "文件名：TrajectoryVisualization.java",
      "接口说明",
      "TrajectoryPanel",
      "drawPoint"
    ]
  },
  {
    "text": "该类用于调整无人机的航迹点高度，以避免无人机之间的高度冲突。它包含一个内部类 `TrackPoint` 用于存储航迹点的时间、纬度、经度和高度信息，以及一个静态方法 `adjustUAVWaypoints` 用于根据给定的高度阈值调整无人机的航迹点高度。",
    "tags": [
      "文件名：UAVWaypointAdjustment.java",
      "总体功能"
    ]
  },
  {
    "text": "*函数功能*  \n根据给定的高度阈值调整无人机的航迹点高度，以避免无人机之间的高度冲突。该方法会根据两个无人机的航迹点高度差，调整高度较高者的高度，使其满足高度差阈值要求。调整策略分为三个阶段：前25秒逐渐提高高度，中间10秒维持调整后的高度，最后25秒逐渐回到原来的高度。\n\n*函数参数*  \n- `altitudeThreshold`：高度阈值，表示两个无人机航迹点之间的最小高度差。\n- `uavAPoints`：无人机A的航迹点列表。\n- `uavBPoints`：无人机B的航迹点列表。\n\n*返回值*  \n返回一个包含两个列表的数组，第一个列表为调整后的无人机A的航迹点列表，第二个列表为调整后的无人机B的航迹点列表。\n\n*异常*  \n无",
    "tags": [
      "文件名：UAVWaypointAdjustment.java",
      "接口说明",
      "函数名：adjustUAVWaypoints"
    ]
  },
  {
    "text": "这个项目涉及到无人机轨迹数据的处理与分析，主要功能包括数据清洗、轨迹对齐、距离计算、路径一致性检查以及轨迹预测等。项目的目标是确保无人机的飞行路径准确、安全，并对轨迹数据进行有效的处理和可视化，以便进一步分析与研究。",
    "tags": [
      "项目背景"
    ]
  },
  {
    "text": "以下是该项目的业务流程：\n1. **数据输入**：通过CSV文件或其他方式输入无人机的原始轨迹数据。\n2. **数据清洗**：使用`DataCleaner.cleanData`方法去除轨迹点数据中的噪声点和异常点。\n3. **轨迹对齐**：使用`interpolation.alignTrajectoryBToA`方法对轨迹数据进行时间对齐。\n4. **距离计算**：通过`FindMinDistanceXYAndZ.findMinDistances`和`minDistanceCal.minDistanceCal`等方法计算轨迹点之间的距离。\n5. **路径一致性检查**：利用`FlightPathConsistencyCheck`类的相关方法检查无人机当前位置是否满足阈值条件，确保飞行路径的一致性。\n6. **轨迹预测**：使用`TrajectoryPrediction.predictTrajectory`和`TrajectoryPredictionV1.predictTrajectory`等方法预测无人机的未来轨迹。\n7. **航迹点调整**：通过`UAVWaypointAdjustment.adjustUAVWaypoints`方法根据高度阈值调整无人机的航迹点高度。\n8. **轨迹可视化**：使用`TrajectoryVisualization.readCsvData`从CSV文件读取数据，然后通过`TrajectoryVisualization.saveFrames`方法保存轨迹可视化结果。",
    "tags": [
      "项目业务流程"
    ]
  },
  {
    "text": "*用例描述*：计算无人机轨迹点之间的最小水平距离和最小垂直距离。\n*条件*：提供两个无人机的轨迹点列表。\n*接口说明*：\n    - `haversineDistance`：\n        - 计算两个地理坐标点之间的水平距离。\n        - 参数：第一个点的纬度和经度、第二个点的纬度和经度。\n        - 返回值：两个点之间的水平距离（单位：米）。\n    - `findMinDistances`：\n        - 计算两个无人机轨迹点列表之间的最小水平距离和最小垂直距离。\n        - 参数：两个无人机的轨迹点列表。\n        - 返回值：包含最小水平距离、最小垂直距离以及对应的轨迹点对的`Result`对象。",
    "tags": [
      "功能需求",
      "CalculateDistances"
    ]
  },
  {
    "text": "*用例描述*：对无人机轨迹点数据进行清洗，去除不满足要求的点。\n*条件*：提供待清洗的轨迹点列表。\n*接口说明*：\n    - `cleanData`：\n        - 清洗轨迹点数据，去除字段缺失、异常值以及与航迹不符的点。\n        - 参数：待清洗的轨迹点列表。\n        - 返回值：清洗后的轨迹点列表。\n    - `isPointInconsistentWithTrajectory`：\n        - 判断当前点是否与前面的航迹点不符。\n        - 参数：当前要判断的轨迹点和前面的航迹点列表。\n        - 返回值：如果当前点与前面的航迹点不符则返回`true`，否则返回`false`。",
    "tags": [
      "功能需求",
      "DataCleaning"
    ]
  },
  {
    "text": "*用例描述*：检查无人机的飞行路径是否一致，包括检查水平和垂直方向上的满足程度。\n*条件*：提供无人机的当前位置、航点列表、水平阈值和垂直阈值。\n*接口说明*：\n    - `checkThreshold`：\n        - 检查无人机当前位置是否满足给定的水平和垂直阈值条件。\n        - 参数：无人机当前位置、航点列表、水平距离阈值、垂直距离阈值。\n        - 返回值：如果无人机当前位置满足任一阈值条件，则返回`true`；否则返回`false`。\n    - `readCSV`：\n        - 从CSV文件中读取航点数据。\n        - 参数：CSV文件路径。\n        - 返回值：包含航点数据的列表。\n    - `haversine`：\n        - 计算两点之间的水平距离，使用Haversine公式。\n        - 参数：第一个点的纬度和经度、第二个点的纬度和经度。\n        - 返回值：两点之间的水平距离。\n    - `verticalDistance`：\n        - 计算两点之间的垂直距离，即高度差。\n        - 参数：第一个点的高度和第二个点的高度。\n        - 返回值：两点之间的垂直距离。\n    - `geodeticToCartesian`：\n        - 将地理坐标转换为笛卡尔坐标。\n        - 参数：纬度、经度、高度。\n        - 返回值：笛卡尔坐标。\n    - `cartesianToGeodetic`：\n        - 将笛卡尔坐标转换为地理坐标。\n        - 参数：x、y、z坐标。\n        - 返回值：地理坐标。\n    - `calculateFootPoint`：\n        - 计算从点P到线段AB的垂足位置。\n        - 参数：点P和线段AB的坐标。\n        - 返回值：垂足的坐标。",
    "tags": [
      "功能需求",
      "FlightPathConsistencyChecking"
    ]
  },
  {
    "text": "*用例描述*：根据无人机的当前状态预测其未来轨迹。\n*条件*：提供无人机的当前状态、预测时间和时间步长。\n*接口说明*：\n    - `predictTrajectory`：\n        - 根据无人机的当前状态和预测参数预测其未来轨迹。\n        - 参数：无人机的当前状态、预测时间、时间步长。\n        - 返回值：预测轨迹的列表。",
    "tags": [
      "功能需求",
      "PredictTrajectory"
    ]
  },
  {
    "text": "*用例描述*：将轨迹B对齐到轨迹A的时间线上。\n*条件*：提供轨迹A和轨迹B的点列表。\n*接口说明*：\n    - `alignTrajectoryBToA`：\n        - 将轨迹B对齐到轨迹A的时间线上。\n        - 参数：轨迹A和轨迹B的点列表。\n        - 返回值：无返回值。\n    - `findClosestPointBefore`：\n        - 在轨迹B中找到时间小于指定点时间的最接近的点。\n        - 参数：指定的点和轨迹B",
    "tags": [
      "功能需求",
      "TrajectoryAlignment"
    ]
  }
]